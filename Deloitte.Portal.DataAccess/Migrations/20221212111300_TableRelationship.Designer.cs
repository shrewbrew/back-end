// <auto-generated />
using System;
using Deloitte.Portal.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Deloitte.Portal.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221212111300_TableRelationship")]
    partial class TableRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Deloitte.Portal.Model.ClaimForms.ClaimFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("claimID")
                        .HasColumnType("int");

                    b.Property<int?>("fileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("claimID");

                    b.HasIndex("fileId");

                    b.ToTable("ClaimFiles");
                });

            modelBuilder.Entity("Deloitte.Portal.Model.ClaimForms.ClaimFormsModel", b =>
                {
                    b.Property<int>("claimID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("COname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovernmentIDFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGovernmentIssuedID")
                        .HasColumnType("bit");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authorizationDocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authorizationFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bandNameMemberOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bandRegistrationNumber")
                        .HasColumnType("int");

                    b.Property<string>("chequeOrDepositFormFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstNationNameOfContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("indianStatusCardNumber")
                        .HasColumnType("int");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("mobileNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("modeOfPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("nameOfNation")
                        .HasColumnType("bit");

                    b.Property<string>("otherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("poBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provinceBandLocated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("socialInsuranceNumber")
                        .HasColumnType("int");

                    b.Property<string>("streetNameAndNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("telephoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("userClaimID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("willYouBeClaimingSpecifiedInjuries")
                        .HasColumnType("bit");

                    b.HasKey("claimID");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Deloitte.Portal.Model.ClaimForms.ClaimReserveForm", b =>
                {
                    b.Property<int>("CRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("claimID")
                        .HasColumnType("int");

                    b.Property<string>("firstNationBandNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fromLivedOnImpactedNation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameOfFirstNation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provinceOrTerritory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("reserveID")
                        .HasColumnType("int");

                    b.Property<string>("untilLivedOnImpactedNation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("waterAdvisoryEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("waterAdvisoryStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CRId");

                    b.HasIndex("claimID");

                    b.HasIndex("reserveID");

                    b.ToTable("ClaimReserve");
                });

            modelBuilder.Entity("Deloitte.Portal.Model.ClaimForms.File", b =>
                {
                    b.Property<int>("fileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("documentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("fileId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Deloitte.Portal.Model.ClaimForms.ReserveFormModel", b =>
                {
                    b.Property<int>("reserveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proviences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endDateOfWaterAdvisory")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstNationBandNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startDateOfWaterAdvisory")
                        .HasColumnType("datetime2");

                    b.HasKey("reserveID");

                    b.ToTable("Reserve");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Deloitte.Portal.Model.ClaimForms.ClaimFile", b =>
                {
                    b.HasOne("Deloitte.Portal.Model.ClaimForms.ClaimFormsModel", "claimId")
                        .WithMany("ClaimFiles")
                        .HasForeignKey("claimID");

                    b.HasOne("Deloitte.Portal.Model.ClaimForms.File", "fileID")
                        .WithMany("ClaimFiles")
                        .HasForeignKey("fileId");
                });

            modelBuilder.Entity("Deloitte.Portal.Model.ClaimForms.ClaimReserveForm", b =>
                {
                    b.HasOne("Deloitte.Portal.Model.ClaimForms.ClaimFormsModel", "ClaimId")
                        .WithMany("ClaimReserve")
                        .HasForeignKey("claimID");

                    b.HasOne("Deloitte.Portal.Model.ClaimForms.ReserveFormModel", "reserveId")
                        .WithMany("ClaimReserve")
                        .HasForeignKey("reserveID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
